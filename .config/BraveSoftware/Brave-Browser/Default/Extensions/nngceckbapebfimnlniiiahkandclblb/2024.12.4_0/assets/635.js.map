{"version":3,"file":"assets/635.js","mappings":"8OAGCA,WAAmBC,SAAW,IAAIC,KAChC,KAAiB,GAEX,IAAI,qBAAuBA,I,6FCH7B,SAASC,EAAKC,IACnBC,EAAAA,EAAAA,gBAAeD,EACjB,C","sources":["webpack:///./src/platform/services/sdk/wasm.ts","webpack:///../../node_modules/@bitwarden/sdk-internal/index.js"],"sourcesContent":["import * as sdk from \"@bitwarden/sdk-internal\";\nimport * as wasm from \"@bitwarden/sdk-internal/bitwarden_wasm_internal_bg.wasm\";\n\n(globalThis as any).init_sdk = (...args: ConstructorParameters<typeof sdk.BitwardenClient>) => {\n  (sdk as any).init(wasm);\n\n  return new sdk.BitwardenClient(...args);\n};\n","import { __wbg_set_wasm } from \"./bitwarden_wasm_internal_bg.js\";\n\n// In order to support a fallback strategy for web we need to conditionally load the wasm file\nexport function init(wasm) {\n  __wbg_set_wasm(wasm);\n}\n\nexport * from \"./bitwarden_wasm_internal_bg.js\";\n"],"names":["globalThis","init_sdk","args","init","wasm","__wbg_set_wasm"],"sourceRoot":""}