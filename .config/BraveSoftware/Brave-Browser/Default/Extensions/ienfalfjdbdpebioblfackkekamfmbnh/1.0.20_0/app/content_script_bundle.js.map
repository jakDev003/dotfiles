{
  "version": 3,
  "sources": ["../../../../../../../../devtools/projects/protocol/src/lib/message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/chrome-message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/same-page-message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/content-script.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport type Parameters<F> = F extends (...args: infer T) => any ? T : never;\n\nexport abstract class MessageBus<T> {\n  abstract on<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract once<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract emit<E extends keyof T>(topic: E, args?: Parameters<T[E]>): boolean;\n  abstract destroy(): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference types=\"chrome\"/>\n\nimport {Events, MessageBus, Parameters} from 'protocol';\n\ninterface ChromeMessage<T, K extends keyof T> {\n  topic: K;\n  args: Parameters<T[K]>;\n}\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\nexport class ChromeMessageBus extends MessageBus<Events> {\n  private _disconnected = false;\n  private _listeners: any[] = [];\n\n  constructor(private _port: chrome.runtime.Port) {\n    super();\n\n    _port.onDisconnect.addListener(() => {\n      // console.log('Disconnected the port');\n      this._disconnected = true;\n    });\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      cb(msg.topic, msg.args);\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  override on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      if (msg.topic === topic) {\n        (cb as any).apply(null, msg.args);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  override once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>) => {\n      if (msg.topic === topic) {\n        (cb as any).apply(null, msg.args);\n        this._port.onMessage.removeListener(listener);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n  }\n\n  override emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    if (this._disconnected) {\n      return false;\n    }\n    this._port.postMessage({\n      topic,\n      args,\n      __ignore_ng_zone__: true,\n    });\n    return true;\n  }\n\n  override destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Events, MessageBus, Parameters} from 'protocol';\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\ntype ListenerFn = (e: MessageEvent) => void;\n\nexport class SamePageMessageBus extends MessageBus<Events> {\n  private _listeners: ListenerFn[] = [];\n\n  constructor(\n    private _source: string,\n    private _destination: string,\n  ) {\n    super();\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener: ListenerFn = (e) => {\n      if (e.source !== window || !e.data || !e.data.topic || e.data.source !== this._destination) {\n        return;\n      }\n      cb(e.data.topic, e.data.args);\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  override on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener: ListenerFn = (e) => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        (cb as any).apply(null, e.data.args);\n      }\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  override once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener: ListenerFn = (e) => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        (cb as any).apply(null, e.data.args);\n      }\n      window.removeEventListener('message', listener);\n    };\n    window.addEventListener('message', listener);\n  }\n\n  override emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    window.postMessage(\n      {\n        source: this._source,\n        topic,\n        args,\n        __ignore_ng_zone__: true,\n      },\n      '*',\n    );\n    return true;\n  }\n\n  override destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChromeMessageBus} from './chrome-message-bus';\nimport {SamePageMessageBus} from './same-page-message-bus';\n\nlet backgroundDisconnected = false;\nlet backendInstalled = false;\nlet backendInitialized = false;\n\nconst port = chrome.runtime.connect({\n  name: `${document.title || location.href}`,\n});\n\nconst handleDisconnect = (): void => {\n  // console.log('Background disconnected', new Date());\n  localMessageBus.emit('shutdown');\n  localMessageBus.destroy();\n  chromeMessageBus.destroy();\n  backgroundDisconnected = true;\n};\n\nport.onDisconnect.addListener(handleDisconnect);\n\nconst detectAngularMessageBus = new SamePageMessageBus(\n  `angular-devtools-content-script-${location.href}`,\n  `angular-devtools-detect-angular-${location.href}`,\n);\n\ndetectAngularMessageBus.on('detectAngular', (detectionResult) => {\n  // only install backend once\n  if (backendInstalled) {\n    return;\n  }\n\n  if (detectionResult.isAngularDevTools !== true) {\n    return;\n  }\n\n  if (detectionResult.isAngular !== true) {\n    return;\n  }\n\n  // Defensive check against non html page. Realistically this should never happen.\n  if (document.contentType !== 'text/html') {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.src = chrome.runtime.getURL('app/backend_bundle.js');\n  document.documentElement.appendChild(script);\n  document.documentElement.removeChild(script);\n  backendInstalled = true;\n});\n\nconst localMessageBus = new SamePageMessageBus(\n  `angular-devtools-content-script-${location.href}`,\n  `angular-devtools-backend-${location.href}`,\n);\nconst chromeMessageBus = new ChromeMessageBus(port);\n\nconst handshakeWithBackend = (): void => {\n  localMessageBus.emit('handshake');\n};\n\nchromeMessageBus.onAny((topic, args) => {\n  localMessageBus.emit(topic, args);\n});\n\nlocalMessageBus.onAny((topic, args) => {\n  backendInitialized = true;\n  chromeMessageBus.emit(topic, args);\n});\n\nif (!backendInitialized) {\n  // tslint:disable-next-line:no-console\n  console.log('Attempting initialization', new Date());\n\n  const retry = () => {\n    if (backendInitialized || backgroundDisconnected) {\n      return;\n    }\n    handshakeWithBackend();\n    setTimeout(retry, 500);\n  };\n  retry();\n}\n\nconst proxyEventFromWindowToDevToolsExtension = (event: MessageEvent) => {\n  if (event.source === window && event.data) {\n    try {\n      chrome.runtime.sendMessage(event.data);\n    } catch (e) {\n      const {message} = e as Error;\n      if (message.includes('Extension context invalidated.')) {\n        console.error(\n          'Angular DevTools: Disconnecting content script due to invalid extension context. Please reload the page.',\n        );\n        window.removeEventListener('message', proxyEventFromWindowToDevToolsExtension);\n      }\n      throw e;\n    }\n  }\n};\n\nwindow.addEventListener('message', proxyEventFromWindowToDevToolsExtension);\n"],
  "mappings": "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",
  "names": ["MessageBus", "ChromeMessageBus", "MessageBus", "_port", "_disconnected", "_listeners", "constructor", "onDisconnect", "addListener", "onAny", "cb", "listener", "msg", "topic", "args", "onMessage", "push", "splice", "indexOf", "removeListener", "on", "apply", "once", "emit", "postMessage", "__ignore_ng_zone__", "destroy", "forEach", "l", "window", "removeEventListener", "SamePageMessageBus", "MessageBus", "_source", "_destination", "_listeners", "constructor", "onAny", "cb", "listener", "e", "source", "window", "data", "topic", "args", "addEventListener", "push", "splice", "indexOf", "removeEventListener", "on", "apply", "once", "emit", "postMessage", "__ignore_ng_zone__", "destroy", "forEach", "l", "backgroundDisconnected", "backendInstalled", "backendInitialized", "port", "chrome", "runtime", "connect", "name", "document", "title", "location", "href", "handleDisconnect", "localMessageBus", "emit", "destroy", "chromeMessageBus", "onDisconnect", "addListener", "detectAngularMessageBus", "SamePageMessageBus", "on", "detectionResult", "isAngularDevTools", "isAngular", "contentType", "script", "createElement", "src", "getURL", "documentElement", "appendChild", "removeChild", "ChromeMessageBus", "handshakeWithBackend", "onAny", "topic", "args", "console", "log", "Date", "retry", "setTimeout", "proxyEventFromWindowToDevToolsExtension", "event", "source", "window", "data", "sendMessage", "e", "message", "includes", "error", "removeEventListener", "addEventListener"]
}
